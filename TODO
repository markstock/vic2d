vic2d - TODO

Add a "-restart num" option to read existing temp, vort, etc. files and restart the sim

Add an option to advect the color at a fraction of the local velocity,
  or give each "pixel" a momentum/ballistic coefficient, and have the
  local velocity create a "force" on the pixel.
  This may generate more wispy, advective-appearing images.

Note that for a 2D simulation with color and density, we need 19 full-sized fields.
  Is there any way to reduce that number?

When loading in a color file, convert immediately to HSV and perform all
  advection on HSV coords. Only when dumping back out to a PNG should the
  values be converted back to RGB. How do we interpolate hue? It's periodic.

Add option to M4' interpolation to disallow new values that exceed the 
  min/max of the 16 or 64 source values. This may prevent blow-up, but at
  the cost of artificial dissipation. DO THIS!

Add poisson process code to this
  Look in vort3d for marquee

Add source/sink terms!!!
  BCs might be hard
Add new noise types for random vorticity?
  Or just rely on external programs for input
Try large sim on tungsten, or ask AMD for compute time
  24k square sim should fit in 40 GB RAM
Rewrite .h files the right way---what I have now sucks
Test creative vorticity input for frozen flow
  Like, a corporate logo, or a piece of art

Allow color PNGs to be input for scalar fields---it just takes the 
brightness component instead of throwing an error.

Support variable viscosity for all variables

0) Support open BCs with either method by doing a treecode solution for the
velocity at the boundary cells. Use the grid as your tree (0-255 is left,
256-511 is right, then same up-down, etc. Nice! Make it recursive, of course.
Look in paramesh-vm for hints).

1) Test a circular cylinder in 2D flow, see if I get the same instability at
Re=40.

2) Add explosion sources (like a point source that appears and disappears)
or
2) Make the source field actually work - meaning scale the interpolation
results by the value of the divergence, but only for vorticity and other
conserved quantities---don't do it for the color scalar.
then
Make a sample movie for Rob


0) get multigrid stuff working! - DONE
2) faster upscaling of output images
3) include either Poisson/FFT or multigrid solution of diffusion problem (for low Re problems)
4) compute and write kinetic energy
5) add input for Boussinesq coefficient - DONE
6) read papers on MOC for large density-stratified flows (free surface)
7) for 3D method, test the baroclinicity of the MOC routine for both
   the velocity and the vorticity advection---is there a difference?
8) write a windowing program to dynamically display the results
9) allow reading in a file and starting with those values as
   either vorticity, heavy/light fluid, or simply scalar value - DONE
10) allow explicit particle movement (or, pull field vals for a given list of points)

DONE
1) add support for Stam-style velocity-MOC
2) allow upscaling of output images--integer, slow
9) fix the problem with edge vorticity getting zeroed!
4) allow entry of dimensionless numbers: Reynolds, Schmidt, others - DONE
5) upgrade to 3D solver, both vorticity and velocity
